---
# Camorent Inventory Onboarding App - Build Instructions

codepractice: always make sure that you add comments to the parts of the codebase where you pull stuff from this PRD and put it in the comment so that when claude code is overwriting or reworking parts to fix issues, it knows the feature specifications. 

objective: we have inventory lying around in our godown and we want to onboard it into our system.
project_type: Mobile-first web application for equipment inventory onboarding
build_approach: Single comprehensive build using React, Flask, Firebase. Platform will start with clean slate database and we will be onboarding inventory from scratch. we need to make SKUs and Categories and Brands on the fly before adding in the inventory. Make those Databases also. 
instruction: stick to what we have in this PRD and no more. 
target_outcome: Voice-to-form inventory system with AI processing and web research

## Core Requirements

technology_stack:
  frontend: React with Create React App for fast component development
  backend: Python Flask with simple REST API structure
  database: Firebase Firestore using service account JSON authentication
  ai_processing: OpenAI API for Whisper speech-to-text and GPT-4o-mini for data extraction
  web_research: Python requests with Scrapegraphai for open-source web scraping
  deployment: Single Vercel deployment with both frontend and API routes

design_system:
  color_scheme:
    primary: "#000000" # Pure black for text and primary elements
    background: "#FFFFFF" # Pure white backgrounds
    accent: "#A855F7" # Bright light purple for highlights and interactive elements
    page_background: "#FFF7ED" # Very light shade of orange for page backgrounds
    gray_light: "#F3F4F6" # Light gray for subtle backgrounds
    gray_medium: "#9CA3AF" # Medium gray for secondary text
    
  typography:
    body_font: "DM Sans" # Primary font for all body text and interface elements
    heading_font: "Plus Jakarta Sans" # Secondary font for headings and emphasis
    font_weights: "400 regular, 500 medium, 600 semibold, 700 bold"
    
  visual_style:
    border_radius: "12px for cards, 8px for buttons, 6px for inputs"
    shadows: "none - completely flat design with no drop shadows"
    borders: "1px solid borders in black or gray for definition"
    icons: "Phosphor Icons library for consistent iconography"
    
  form_elements:
    dropdowns: "Custom styled dropdowns, not browser default select elements"
    inputs: "Black borders, purple focus states, rounded corners"
    buttons: "Black background, white text, purple hover states"

## Application Structure

pages_and_routing:
  add_item: "Main onboarding flow at /add with voice recording and form"
  inventory: "Inventory list view at /inventory with search and filters"
  skus: "Equipment types list at /skus with category grouping"
  login: "Simple email/password login at /login using Firebase Auth"

voice_to_form_workflow:
  step_1_recording:
    interface: "Large purple microphone button in center with recording animation"
    functionality: "Record audio using browser MediaRecorder API, 2 minute maximum"
    progress: "Show recording duration, waveform visualization, stop/restart options"
    
  step_2_processing:
    progress_modal: "Full screen overlay showing 4 processing steps with animations"
    audio_transcription: "Send audio to OpenAI Whisper API for speech-to-text"
    ai_extraction: "Use GPT-4o-mini to extract structured equipment data from transcript"
    web_research: "Python requests + Scrapegraphai to scrape equipment specifications"
    form_preparation: "Combine all data and prepare pre-filled form for user review"
    
  step_3_form_review:
    layout: "Mobile-optimized form with sections for identification, condition, specs, pricing"
    prefill_behavior: "Auto-populate fields from AI extraction with confidence indicators"
    user_editing: "Allow manual editing of any field with clear save/cancel options"
    validation: "Real-time validation with error messages and required field highlighting"
    
  step_4_save:
    database_operations: "Save to Firebase Firestore with automatic SKU linking or creation"
    success_feedback: "Confirmation screen with options to add another item or view inventory"

## Database Schema

firestore_collections:
  skus:
    document_id: "Auto-generated by Firestore"
    fields:
      name: "string - Full equipment name like Canon EOS R5"
      brand: "string - Manufacturer name like Canon Sony Nikon"
      model: "string - Model identifier like EOS R5 A7IV"
      category: "string - Equipment category like cameras lenses lighting"
      description: "string - Detailed description of equipment"
      specifications: "object - JSON object with technical specs"
      price_per_day: "number - Daily rental price in INR"
      security_deposit: "number - Required deposit amount"
      image_url: "string - Primary product image URL"
      created_at: "timestamp - Creation date"
      is_active: "boolean - Whether SKU is available for rental"
      
  inventory:
    document_id: "Auto-generated by Firestore" 
    fields:
      sku_id: "string - Reference to parent SKU document"
      serial_number: "string - Unique manufacturer serial number"
      barcode: "string - Internal barcode for tracking"
      condition: "string - new, good, fair, damaged"
      status: "string - available, booked, maintenance, retired"
      location: "string - Physical storage location"
      purchase_price: "number - Original purchase cost"
      current_value: "number - Current estimated value"
      notes: "string - Additional notes about condition or issues"
      created_at: "timestamp - When added to inventory"
      created_by: "string - User ID who added the item"

## AI Processing Instructions

openai_integration:
  whisper_usage:
    endpoint: "https://api.openai.com/v1/audio/transcriptions"
    model: "whisper-1"
    audio_format: "Convert recorded audio to MP3 before sending"
    language: "Auto-detect, primarily English and Hindi support"
    
  gpt_extraction:
    model: "gpt-4o-mini"
    system_prompt: "You are an equipment cataloger. Extract structured data from equipment descriptions and return only valid JSON."
    response_format: "Force JSON output with specific schema for equipment details"
    extraction_fields: "equipment_type, brand, model, condition, description, estimated_value, web_search_query"

web_research_implementation:
  approach: "Use Python requests and Scrapegraphai for open-source web scraping"
  target_sites: "Search Google for '[brand] [model] specifications' and scrape first 3 results"
  data_extraction: "Extract specifications, pricing, images from manufacturer and retailer sites"
  rate_limiting: "Add delays between requests to avoid being blocked"

## UI Components and Layout

mobile_first_design:
  viewport: "Always force mobile viewport, max-width 414px centered on desktop"
  navigation: "Bottom tab bar with 3 tabs: Add Item, Inventory, SKUs - floating with super rounded corners, 20px margins from edges, black background with white/purple elements"
  header: "Simple header with page title and logout button NO TOP NAV BAR"
  touch_targets: "Minimum 44px height for all interactive elements"
  page_background: "Very light shade of orange (#FFF7ED) for all pages"

key_components:
  recording_interface:
    microphone_button: "120px circular button with Phosphor microphone icon that manages both start and stop recording"
    recording_state: "Purple background when recording with pulse animation"
    timer_display: "Recording duration shown below button"
    controls: "Stop recording and start over buttons when active"
    samples: "A CTA to use a sample text (instead of recording) and do the full real processing experience (no simulating)"
    helpers: "Guiding words in form of chips with examples to help the user know what to speak."
    
  progress_overlay:
    design: "Full screen modal with white background and black text"
    steps: "4 progress steps with purple accent colors and loading animations"
    step_indicators: "Step 1: Converting speech, Step 2: Understanding equipment, Step 3: Researching specs, Step 4: Preparing form"
    cancellation: "X button in top right to cancel processing"
    ciritcal: Never simulate this process. DO this really as in always ensure apis are called and data is processed in reality. 
    
  form_interface:
    layout: "Single page scrollable form, not tab view"
    sections: "Equipment ID, Condition, Inventory Details, Financial, Images"
    input_styling: "Black borders, purple focus states, DM Sans font"
    custom_dropdowns: "Styled with Phosphor chevron icons, not browser default"
    confidence_indicators: "Purple checkmarks next to AI-filled fields"
    save_button: "Full width black button with white text"
    image_handling: "Show web-scraped images, allow remove/upload/undo, set primary image"

## Authentication and Security

firebase_auth:
  setup: "Use Firebase service account JSON for admin SDK initialization"
  user_flow: "Simple email/password login with automatic redirect to main app"
  session_management: "Firebase handles token refresh and persistence automatically"
  access_control: "Only allow access to authenticated users, no role restrictions for MVP"

## API Architecture

flask_routes:
  "/api/process-audio": "POST - Accept audio file, transcribe with Whisper, extract with GPT, research web, return structured data"
  "/api/process-sample": "POST - Process sample text through full pipeline (GPT extraction + web research)"
  "/api/inventory": "GET/POST - List inventory items with filters, create new inventory items"
  "/api/skus": "GET/POST - List equipment SKUs, create new SKUs" 
  "/api/categories": "GET - Return predefined categories list for dropdowns"
  "/api/auth/login": "POST - Custom authentication using Firestore users collection"
  "/api/auth/signup": "POST - Create new user account in Firestore"

processing_pipeline:
  audio_handling: "Save uploaded file temporarily, send to Whisper API"
  data_extraction: "Process Whisper transcript with GPT-4o-mini for structured extraction"
  web_research: "Search Google and scrape top results for equipment specifications using real web scraping with BeautifulSoup and requests"
  image_extraction: "Extract product images from web scraping results for SKU database"
  response_format: "Return JSON with extracted data, web research results, images, and confidence scores"

## Deployment Configuration

vercel_setup:
  build_command: "npm run build for React frontend"
  api_functions: "Python Flask routes in /api directory as serverless functions"
  environment_variables: "OPENAI_API_KEY and FIREBASE_SERVICE_ACCOUNT_JSON"
  static_files: "React build files served from root with API routing"

file_structure:
  frontend: "src/ directory with React components, pages, and utilities"
  backend: "api/ directory with Flask app and processing functions"
  config: "Firebase config and OpenAI client setup"
  styles: "Tailwind CSS with custom design system configuration"

## Implementation Notes

critical_features:
  error_handling: "Graceful fallbacks for API failures with manual input options"
  performance: "Optimize for mobile with lazy loading and efficient rendering"
  validation: "Real-time form validation with clear error messages"

user_experience:
  onboarding: "Simple first-time user flow with feature explanations"
  feedback: "Loading states, success messages, and clear error communication"
  navigation: "Intuitive flow between recording, processing, and form completion"
  accessibility: "Proper ARIA labels, keyboard navigation, and screen reader support"

## Build Instructions Summary

For Claude Code: Build a mobile-first React web app with Flask API backend that allows operations team to record voice descriptions of equipment, processes them with OpenAI APIs, researches specifications using web scraping, and presents a pre-filled form for review and saving to Firebase Firestore. Use the specified design system with black/white/purple colors, DM Sans and Plus Jakarta Sans fonts, Phosphor icons, and completely flat design without shadows. Focus on smooth voice-to-form workflow with clear progress indication and mobile-optimized interface.